GitHub Profile Search

Getting started:
Copy the node_modules directory from a previous activity into this
directory, and then get started by running:

    npm run start

----------------------
Challenge #1: console.log & React Dev Tools

Adding console.log is always a good idea. Add one to the onSubmit
method, as such:

    console.log('Getting clicked!', this.state.username);

This will let you debug that it is indeed getting clicked with a given
username typed-in.

----------------------
Challenge #2: Implementing fetch

Using previous activities and your cheatsheet as a guide, add in a fetch
to the onSubmit method. For now, just console.log the result.


----------------------
Challenge #3: Add setState after fetch

For successful fetches, we now want to do a setState to set the results
in the state and re-render the application. This should be done in the
last .then() callback. You can use something like:

  this.setState({
      results: data,
  });

If you do it correctly, it should list all the repos for the person
who's name you typed in!


----------------------
Challenge #4: Add a loading state

A common pattern is to display a "spinner" (GIF or other image that
spins) when you are loading data.

1. Create a new state property called isLoading and set it to be "true"
when you first "kick off" the search.  Set it to be "false", when you
receive the response.

2. Make the loading GIF only appear when the isLoading is "true"


----------------------
Bonus Challenge: Fix the "unique key" warning

See if you can figure out how to fix React's unique key warning. This
won't affect anything in this example, but in very large lists can
affect performance.

----------------------
Advanced Challenge: Search-as-you-type, debounced

1. Implement "search as you type" (essentially, just move the fetch
statement into the onChange event.

2. This generates too many fetches! It could even get your API key
blocked very quickly. In reality, we want it to only search when they
STOP typing. This concept is called "denouncing". See here for a
tutorial on how to use the throttle-debounce NPM package to add
denouncing to your React app's events:

https://blog.revathskumar.com/2016/02/reactjs-using-debounce-in-react-components.html

3. Implement debouncing on your search-as-you-type feature.

